# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Excel2Mapa
                                 A QGIS plugin
 Genera un mapa tomando datos de un archivo excel
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-02-20
        git sha              : $Format:%H$
        copyright            : (C) 2025 by INEGI
        email                : emmanuel.rodriguez@inegi.org.mx
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QVariant
from qgis.gui import QgsMessageBar
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QMessageBox,QTableWidgetItem,QPushButton
from qgis.core import  QgsProject,  QgsLayoutExporter, Qgis,QgsLayoutItemLabel,QgsField

from qgis.core import (
    QgsProject,
    QgsField,
    QgsRendererCategory,
    QgsCategorizedSymbolRenderer,
    QgsSymbol
)
from PyQt5.QtGui import QColor

from .resources import *
from .excel2mapa_dialog import Excel2MapaDialog
import os.path
import shutil


class Excel2Mapa:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.original = f"{self.plugin_dir}/Plantilla_3_34_final_2.qgz"
        self.copia = None

        # initialize locale
        locale = QSettings().value('locale/userLocale')[:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n', f'Excel2Mapa_{locale}.qm')

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Excel 2 Mapa')
        self.variables = {}
        self.datosAct = None
        self.categorias = None
        self.colorRampa = ["255,255,255,255","255,255,255,255","255,255,255,255","255,255,255,255","255,255,255,255"]
        self.rampaActual = None
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    @property
    def Copia(self):
        return self.copia
    @Copia.setter
    def Copia(self,valor):
        os.remove(f"{self.plugin_dir}/{valor}.qgz") if os.path.exists(f"{self.plugin_dir}/{valor}.qgz") else None
        self.copia = shutil.copyfile(self.original,f"{self.plugin_dir}/{valor}.qgz").replace("\\","/")
    
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Excel2Mapa', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = './plugins/excel2mapa/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Excel - Mapa'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Excel 2 Mapa'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def load_qgz_project(self):
        if os.path.exists(self.Copia) and QgsProject.instance().read(self.Copia):
            self.iface.messageBar().pushMessage("INEGI","Proyecto cargado satisfactoriamente",Qgis.Info,5)
            return True
        self.iface.messageBar().pushMessage("INEGI","Error al cargar el proyecto",Qgis.Critical,5)
        return False
    
    def validar(self,file):
        if file.split(".")[-1] in ["xls","xlsx"]:
            import pandas as pan
            ex = pan.read_excel(file,index_col=None,header=None,sheet_name="Composicion")
            self.dlg.tableWidget.setRowCount(len(ex.index))
            self.dlg.tableWidget.setColumnCount(len(ex.columns))
            for i in range(len(ex.index)):
                for j in range(len(ex.columns)):
                    self.dlg.tableWidget.setItem(i, j, QTableWidgetItem(str(ex.iat[i, j])))
            self.iface.messageBar().pushMessage("Cargando Excel","Los  datos fueron cargados satisfactoriamente",Qgis.Info,5)
            for i,v in ex.iterrows():
                self.variables[v[0]] = v[1]
            self.datosAct = pan.read_excel(file,index_col=0,header=0,sheet_name="Datos")
            self.categorias = len(list(self.datosAct["Clase"].unique()))
            self.rampasColor()
        else:
            self.iface.messageBar().pushMessage("Cargando Excel","El archivo no es tipo Excel",Qgis.Critical,10)


    def crearComposicion(self):
        def agregaCampos(**dat):
            capa = proyect.mapLayersByName(dat["lay"][0])[0]
            dataPro = capa.dataProvider()
            dataPro.addAttributes([QgsField(*cam) for cam in dat["campos"] if cam[0] not in [field.name() for field in dataPro.fields()]])
            capa.updateFields()    
            capApagada = proyect.mapLayersByName(dat["lay"][1])[0]
            proyect.layerTreeRoot().findLayer(capApagada.id()).setItemVisibilityChecked(False)       
            idx_new =  [dataPro.fieldNameIndex(cam[0]) for cam in dat["campos"]]
            for i in range(capa.featureCount()):
                for idx in idx_new:
                    capa.changeAttributeValue(i, idx, None)
            return idx_new
        def agregarValores(**dat):
            capa = proyect.mapLayersByName(dat["lay"][0])[0]
            capa.startEditing()
            for i,vals in self.datosAct.iterrows():
                capa.changeAttributeValue(i,dat["idxCampos"][0],vals[0])
                capa.changeAttributeValue(i,dat["idxCampos"][1],vals[1])  
            capa.commitChanges()

        def categorizar_layer(**dat):
            capa = proyect.mapLayersByName(dat["lay"][0])[0]
            unique_values = self.datosAct[newCampos[0]].unique()
            categories = []
            for value, color in zip(unique_values,self.rampaActual):
                color = ''.join([f'{int(c):02X}' for c in color.split(",")[:3]])
                symbol = QgsSymbol.defaultSymbol(capa.geometryType())
                symbol.setColor(QColor(f"#{color}"))  # Set color as needed
                category = QgsRendererCategory(value, symbol, str(value))
                categories.append(category)
            renderer = QgsCategorizedSymbolRenderer(newCampos[0], categories)
            capa.setRenderer(renderer)  
            capa.triggerRepaint()


        
        def compositor(self):
            composerTitle = 'MyComposer' # Name of the composer
            project = QgsProject.instance()
            projectLayoutManager = project.layoutManager()
            layout = projectLayoutManager.layoutByName(composerTitle)
            return layout
        


        def VerPdf():
            os.startfile(export_path_pdf)
        def VerImg():
            os.startfile(export_path_img)

        proyect = QgsProject.instance()
        newCampos= list(self.datosAct.keys())
        cantReg = len(self.datosAct.index)
        nomCapas = ["EstadosMexico","Municipios_2020"]
        cap =  nomCapas if cantReg<=32 else nomCapas[::-1]
        indices = agregaCampos(lay=cap ,campos=[[newCampos[0],QVariant.String],[newCampos[1],QVariant.Int]])
        agregarValores(lay=cap,idxCampos=indices)
        categorizar_layer(lay=cap)
        proxe =proyect.layoutManager()
        if lst := proxe.printLayouts():
            layout = lst[0]
            etiq = [i for i in layout.items() if isinstance(i,QgsLayoutItemLabel)]
            vari=self.variables
            for  i in range(len(etiq)):
                k = etiq[i].displayName()[4:-2].strip()
                etiq[i].setText(str(vari[k])  if  vari.get(k) else "ETIQUETA NO ENCONTRADA" )
            exporter = QgsLayoutExporter(layout)
            export_path_pdf = os.path.join(self.plugin_dir, "map_composition.pdf")
            export_path_img = os.path.join(self.plugin_dir, "map_composition.png")
            result = exporter.exportToPdf(export_path_pdf, QgsLayoutExporter.PdfExportSettings())
            result2 = exporter.exportToImage (export_path_img, QgsLayoutExporter.ImageExportSettings())
            if result == QgsLayoutExporter.Success:
                widget = self.iface.messageBar().createMessage("MAPA EXPORTADO SATISFACTORIAMENTE", "Utilice los botones de la derecha para ver el resultado.")
                boton_pdf = QPushButton(widget)
                boton_pdf.setText("Ver PDF")
                boton_pdf.pressed.connect(VerPdf)
                widget.layout().addWidget(boton_pdf)
                boton_img = QPushButton(widget)
                boton_img.setText("Ver IMAGEN")
                boton_img.pressed.connect(VerImg)
                widget.layout().addWidget(boton_img)
                self.iface.messageBar().pushWidget(widget, Qgis.Info)
            else:
                self.iface.messageBar().pushMessage("INEGI", "Error al exportar el mapa a PDF", Qgis.Critical, 5)
        else:
            self.iface.messageBar().pushMessage("INEGI", "No se encontró ninguna composición de mapa", Qgis.Warning, 5)


    def cambiarValor(self,valor):
        print(valor)
    
    def seleccRampa(self):
        color = next(
            (
                r["colores"]
                for r in self.colorRampa
                if r["nombre"] == self.dlg.comboRampas.currentText()
            ),
            [],
        )
        self.rampaActual = color
        for i in range(len(color)):
            eval(f"self.dlg.rampa{i+1}.setStyleSheet('background-color:rgba({color[i]});')")
            eval(f"self.dlg.rampa{i+1}.setText('{i+1}')")
    
    def rampasColor(self):
        import json
        with open(f"{self.plugin_dir}/styles-INEGI.json","r") as js:
            rampas = json.load(js)["qgis_style"]["colorramps"]
        self.colorRampa = [{"nombre": r["name"],"colores":list(r["options"].values())[:self.categorias]}  for r in rampas if (len(list((r["options"].keys())))-1)/2 ==self.categorias]
        self.dlg.comboRampas.clear()
        for rampa in self.colorRampa:
            self.dlg.comboRampas.addItem(rampa["nombre"])
        

    def limpiar(self):
        self.dlg.tableWidget.clear()   
        self.dlg.tableWidget.setRowCount(0)
        self.dlg.tableWidget.setColumnCount(0)  
        self.dlg.comboRampas.clear()
        self.dlg.comboRampas.addItem("Seleccione una rampa")
        self.dlg.comboRampas.setCurrentIndex(0)
        self.dlg.rampa1.clear()
        self.dlg.rampa2.clear()
        self.dlg.rampa3.clear()
        self.dlg.rampa4.clear()
        self.dlg.rampa5.clear()
        self.dlg.rampa6.clear()
        self.dlg.mQgsFileWidget.clear()
        self.dlg.comboRampas.addItem("Archivo Excel")
        self.dlg.mQgsFileWidget.setCurrentIndex(0)


    def salir(self):
        self.dlg.close()
        self.dlg.destroy()



    def run(self):
        if self.first_start == True:
            self.first_start = False
            self.dlg = Excel2MapaDialog()
        self.dlg.show()
        self.Copia = "copia_tmp"
        self.load_qgz_project()
        self.dlg.mQgsFileWidget.fileChanged.connect(self.validar)
        self.dlg.rojo.valueChanged.connect(self.cambiarValor)
        self.dlg.comboRampas.currentTextChanged.connect(self.seleccRampa)
        self.dlg.btnMapa.clicked.connect(self.crearComposicion)
        self.dlg.limpiarDatos.clicked.connect(self.limpiar)
        self.dlg.salir.clicked.connect(self.salir)
        self.dlg.setWindowTitle("Generardor Mapas Tematicos")
        if result := self.dlg.exec_():
            print("Entro al if")