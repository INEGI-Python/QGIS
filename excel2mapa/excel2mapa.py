# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Excel2Mapa
                                 A QGIS plugin
 Genera un mapa tomando datos de un archivo excel
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-02-20
        git sha              : $Format:%H$
        copyright            : (C) 2025 by INEGI
        email                : emmanuel.rodriguez@inegi.org.mx
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.gui import QgsMessageBar
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QMessageBox,QTableWidgetItem
from qgis.core import  QgsProject, QgsVectorLayer, QgsLayoutExporter, Qgis


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .excel2mapa_dialog import Excel2MapaDialog
import os.path


class Excel2Mapa:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        self.plantilla = f"{self.plugin_dir}/Plantilla_3_34.qgz "
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Excel2Mapa_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Excel 2 Mapa')
        self.variables = None
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Excel2Mapa', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/excel2mapa/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Excel - Mapa'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Excel 2 Mapa'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def load_qgz_project(self,plantilla):
        ruta=plantilla.replace("\\","/")
        print(ruta)
        if  os.path.exists(ruta):
            if QgsProject.instance().read(ruta):
                self.iface.messageBar().pushMessage("INEGI",f"Proyecto  cargado Satisfactoriamente",Qgis.Info,5)
                return True
        self.iface.messageBar().pushMessage("INEGI",f" Ocurrio un error al cargar el proyecto o esta ruta:  {ruta} no existe.",Qgis.Critical,5)
        return False

    def crearComposicion(self):
        proyect = QgsProject.instance()
        proxe =proyect.layoutManager()
        if lst := proxe.printLayouts():
            layout = lst[0]
            #layout.variablesChanged()
            exporter = QgsLayoutExporter(layout)
            export_path = os.path.join(self.plugin_dir, "map_composition.pdf")
            result = exporter.exportToPdf(export_path, QgsLayoutExporter.PdfExportSettings())
            if result == QgsLayoutExporter.Success:
               import os
               os.system(f"curl {exporter_path}")
               self.iface.messageBar().pushMessage("INEGI", "Mapa exportado satisfactoriamente a PDF", Qgis.Info, 5)
            else:
                self.iface.messageBar().pushMessage("INEGI", "Error al exportar el mapa a PDF", Qgis.Critical, 5)
        else:
            self.iface.messageBar().pushMessage("INEGI", "No se encontró ninguna composición de mapa", Qgis.Warning, 5)



    def run(self):
        def validar(file):
            print(dir(self.dlg.tableWidget))
            if file.split(".")[-1] in ["xls","xlsx"]:
                import pandas as pan
                ex = pan.read_excel(file,index_col=None,header=None,sheet_name="Composicion")
                self.dlg.tableWidget.setRowCount(len(ex.index))
                self.dlg.tableWidget.setColumnCount(len(ex.columns))
                for i in range(len(ex.index)):
                    for j in range(len(ex.columns)):
                        self.dlg.tableWidget.setItem(i, j, QTableWidgetItem(str(ex.iat[i, j])))
                self.iface.messageBar().pushMessage("Cargando Excel","Los  datos fueron cargados satisfactoriamente",Qgis.Info,10)
                self.variables = ex
            else:
                self.iface.messageBar().pushMessage("Cargando Excel","El archivo no es tipo Excel",Qgis.Critical,10)

        """Run method that performs all the real work"""
        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = Excel2MapaDialog()
        # show the dialog
        self.dlg.show()
        self.load_qgz_project(f"{self.plugin_dir}/Plantilla_3_34.qgz")    
        self.dlg.mQgsFileWidget.fileChanged.connect(validar)


        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.crearComposicion()
            self.dlg.destroy()
            pass
