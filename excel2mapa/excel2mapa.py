# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Excel2Mapa
                                 A QGIS plugin
 Genera un mapa tomando datos de un archivo excel
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-02-20
        git sha              : $Format:%H$
        copyright            : (C) 2025 by INEGI
        email                : emmanuel.rodriguez@inegi.org.mx
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication,QVariant
from qgis.gui import QgsMessageBar
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction,QMessageBox,QTableWidgetItem,QPushButton
from qgis.core import  QgsProject,  QgsLayoutExporter, Qgis,QgsVectorLayer,QgsExpressionContextUtils, QgsLayoutItemLegend,QgsLegendStyle
from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtWidgets import QAction


from qgis.core import (
    QgsRendererCategory,
    QgsCategorizedSymbolRenderer,
    QgsSymbol
)
from PyQt5.QtGui import QColor,QFont

from .resources import *
from .excel2mapa_dialog import excel2mapaDialog
import os.path
import shutil
import geopandas as geo
import pandas as pan
import os
from datetime import datetime as dt


hoy = dt.today()  
#QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),"plugin_dir",os.path.dirname(__file__).replace("\\","/"))
class excel2mapa:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__).replace("\\","/")
        self.original = f"{self.plugin_dir}/plantilla/Plantilla_3_34.qgz"
        self.copia = None

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(self.plugin_dir, 'i18n', f'excel2mapa_{locale}.qm')

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Excel 2 Mapa')
        self.variables = {}
        self.datosAct = None
        self.categorias = None
        self.colorRampa = ["255,255,255,255","255,255,255,255","255,255,255,255","255,255,255,255","255,255,255,255"]
        self.rampaActual = None
        self.año = 2020
        self.rutaGuardar=None
        self.composicion = {"nombre":"Escala 1:21 000 000"}
        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    @property
    def Copia(self):
        return self.copia
    @Copia.setter
    def Copia(self,valor):
        os.remove(f"{self.plugin_dir}/{valor}.qgz") if os.path.exists(f"{self.plugin_dir}/{valor}.qgz") else None
        self.copia = shutil.copyfile(self.original,f"{self.plugin_dir}/{valor}.qgz").replace("\\","/")
    
    def categorizar_layer(self,lay,newCampos,proyect=QgsProject.instance()):
        capa = proyect.mapLayersByName(lay)[0]
        unique_values = self.datosAct[newCampos[0]].unique()
        categories = []
        for value, color in zip(unique_values,self.rampaActual):
            color = ''.join([f'{int(c):02X}' for c in color.split(",")[:3]])
            symbol = QgsSymbol.defaultSymbol(capa.geometryType())
            symbol.setColor(QColor(f"#{color}"))  # Set color as needed
            if lay=="EstadosMexico":
                symbol.symbolLayer(0).setStrokeColor(QColor(f"#{color}"))
                symbol.symbolLayer(0).setStrokeWidth(0.01)
            else:
                symbol.symbolLayer(0).setStrokeColor(QColor("#505255"))
                symbol.symbolLayer(0).setStrokeWidth(0.1)
                #symbol.symbolLayer(0).setStrokeStyle(0)
            

            category = QgsRendererCategory(value, symbol, str(value))
            categories.append(category)
        renderer = QgsCategorizedSymbolRenderer(newCampos[0][:10], categories)
        capa.setRenderer(renderer)  
        capa.triggerRepaint()
    
    
    def seleccRampa(self):
        color = next(
            (
                r["colores"]
                for r in self.colorRampa
                if r["nombre"] == self.dlg.comboRampas.currentText()
            ),
            [],
        )
        self.rampaActual = color
        self.limpiaRampas(6)
        for i in range(len(color)):
            eval(f"self.dlg.rampa{i+1}.setStyleSheet('background-color:rgba({color[i]});')")
            eval(f"self.dlg.rampa{i+1}.setText('{i+1}')")
        newCampos= list(self.datosAct.keys())
        self.categorizar_layer(f"EstadosMexico" if len(self.datosAct.index)<=32 else f"Municipios_{self.año}",newCampos)

    
    def rampasColor(self):
        import json
        with open(f"{self.plugin_dir}/plantilla/estilos-INEGI.json","r") as js:
            rampas = json.load(js)["colorramps"]
        self.colorRampa = [{"nombre": r["name"],"colores":r["colors"][:self.categorias]}  for r in rampas if ((len(r["colors"]))-1)/2 == self.categorias]
        self.dlg.comboRampas.clear()
        for rampa in self.colorRampa:
            self.dlg.comboRampas.addItem(rampa["nombre"])
        newCampos= list(self.datosAct.keys())
        self.categorizar_layer(f"EstadosMexico" if len(self.datosAct.index)<=32 else f"Municipios_{self.año}",newCampos)

    def limpiaRampas(self,cant):
        for i in range(cant):
            eval(f"self.dlg.rampa{i+1}.clear()")
            eval(f"self.dlg.rampa{i+1}.setStyleSheet('background-color:rgba(255,255,255,255);')")    
    
    def limpiar(self):
        self.dlg.tableWidget.clear()   
        self.dlg.tableWidget.setRowCount(0)
        self.dlg.tableWidget.setColumnCount(0)  
        self.dlg.comboRampas.clear()
        self.dlg.comboRampas.addItem("Seleccione una rampa")
        self.dlg.comboRampas.setCurrentIndex(0)
        self.limpiaRampas(6)
        self.dlg.mQgsFileWidget.setFilePath("")
        self.dlg.carpetaGuardar.setFilePath("")
        self.dlg.msgGuardado.setHidden(True)
 
    def tr(self, message):
        return QCoreApplication.translate('Excel2Mapa', message)

    def add_action(self,icon_path, text,callback,enabled_flag=True,add_to_menu=True,add_to_toolbar=True, status_tip=None, whats_this=None, parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        #icon_path = ':/plugins/excel2mapa/icon.png'
        icon_path = f"{self.plugin_dir}/icon.png"
        self.add_action(
            icon_path,
            text=self.tr(u'Excel - Mapa'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Excel 2 Mapa'),
                action)
            self.iface.removeToolBarIcon(action)
    
    def load_qgz_project(self):
        if os.path.exists(self.Copia) and QgsProject.instance().read(self.Copia):
            self.iface.messageBar().pushMessage("INEGI","Proyecto cargado satisfactoriamente",Qgis.Info,5)
            return True
        self.iface.messageBar().pushMessage("INEGI","Error al cargar el proyecto",Qgis.Critical,5)
        return False
    
    def validar(self,file):
        if not file:
            return
        ex = pan.read_excel(file,index_col=None,header=None,sheet_name="Composicion")
        self.dlg.tableWidget.setRowCount(len(ex.index))
        self.dlg.tableWidget.setColumnCount(len(ex.columns))
        for i in range(len(ex.index)):
            for j in range(len(ex.columns)):
                self.dlg.tableWidget.setItem(i, j, QTableWidgetItem(str(ex.iat[i, j])))
        self.iface.messageBar().pushMessage("Cargando Excel","Los datos fueron cargados satisfactoriamente",Qgis.Info,5)
        for i,v in ex.iterrows():
            self.variables[v[0]] = v[1]
        self.datosAct = pan.read_excel(file,index_col=0,header=0,sheet_name="Datos")

        aux = pan.read_excel(file,index_col=None,header=0,sheet_name="Datos")

        self.dlg.tableWidget_2.setRowCount(len(aux.index))
        self.dlg.tableWidget_2.setColumnCount(len(aux.columns))
        self.dlg.tableWidget_2.setHorizontalHeaderLabels(aux.columns)
        for i in range(len(aux.index)):
            for j in range(len(aux.columns)):
                self.dlg.tableWidget_2.setItem(i, j, QTableWidgetItem(str(aux.iat[i, j])))

        if len(self.datosAct.index)==32:
            self.dlg.selectMuni.setDisabled(True)
        else:
            self.dlg.selectMuni.setEnabled(True)
        self.composicion["capa"] = self.unirDatos("EstadosMexico",['CVEGEO','CVE_ENT','NOMGEO',"NOM_ABR",'geometry'],f"Municipios_{self.año}") if len(self.datosAct.index)<=32 else self.unirDatos(f"Municipios_{self.año}",['CVEGEO','CVE_ENT','CVE_MUN','NOMGEO','geometry'])
        self.categorias = len(list(self.datosAct["Clase"].unique()))
        self.rampasColor()
        self.dlg.carpetaGuardar.setFilePath("")
        self.dlg.msgGuardado.setHidden(True)


    def unirDatos(self,capa,campos,apagar="EstadosMexico",proyecto=QgsProject.instance()):
        ruta = f"{self.plugin_dir}/plantilla"
        ls = proyecto.mapLayers()
        [proyecto.removeMapLayer(ls[l]) for l in ls.keys()  if ls[l].name()[0:10]=="Municipios" or ls[l].name()=="EstadosMexico"]            
        if os.path.exists(f"{ruta}/{capa}_composicion.shp"):
            os.remove(f"{ruta}/{capa}_composicion.shp")
        
        datos = geo.read_file(f"{ruta}/TemplateQgis_3_34.gpkg",layer=capa  if capa=="EstadosMexico" else f"{capa}_finales" ,columns=campos,encoding='utf-8') 
        datos["CVEGEO"] = datos["CVEGEO"].astype('Int64')
        datos.set_index('CVEGEO',inplace=True)
        union = datos.join(self.datosAct)
        union.sort_values("Clase")
        union.to_file(f"{ruta}/{capa}_composicion.shp", index=True)   
        proyecto.addMapLayer(QgsVectorLayer(f'{ruta}/{capa}_composicion.shp',capa),False)
        proyecto.layerTreeRoot().insertLayer(4,proyecto.mapLayersByName(capa)[0])
        if capa=="EstadosMexico":
            self.dlg.selectMuni.enabled=False
        else:
            self.dlg.selectMuni.enabled=True
        try:
            capApagada = proyecto.mapLayersByName(apagar)[0]
            proyecto.layerTreeRoot().findLayer(capApagada.id()).setItemVisibilityChecked(False) 
        except Exception as e:
            print(e)
        return capa

    def crearComposicion(self):
        def VerPdf():
            os.startfile(export_path_pdf)
        def VerImg():
            os.startfile(export_path_img)
        proyect = QgsProject.instance()
        proxe =proyect.layoutManager()
        layout = proxe.layoutByName(self.composicion["nombre"])
        legend=None
        for k in self.variables.keys():
            QgsExpressionContextUtils.setLayoutVariable(layout, k, self.variables[k])
        for i in layout.items():
            if isinstance(i,QgsLayoutItemLegend):
                legend = i
                break
        legend.setAutoUpdateModel(False)
        root=legend.model().rootGroup()
        layerNuevo = [l for l in proyect.mapLayers().values() if l.name()==self.composicion["capa"]][0]
        root.removeAllChildren()
        root.addLayer(layerNuevo)
        legend.refresh()
        layout.refresh()
        layout.update()
        
        ahorita=hoy.now().__str__()[:-7].replace(":",".").replace(" ","..")
        exporter = QgsLayoutExporter(layout)
        export_path_pdf = os.path.join(self.rutaGuardar, f"{self.variables['TituloMapa']}_composition_{ahorita}.pdf")
        export_path_img = os.path.join(self.rutaGuardar, f"{self.variables['TituloMapa']}_composition_{ahorita}.png")
        settings=QgsLayoutExporter.PdfExportSettings()
        result = exporter.exportToPdf(export_path_pdf,settings)
        result2 = exporter.exportToImage (export_path_img, QgsLayoutExporter.ImageExportSettings())
        if result == QgsLayoutExporter.Success:
            widget = self.iface.messageBar().createMessage("COMPOSICION GUARDADA  SATISFACTORIAMENTE", "Utilice los botones de la derecha para ver el resultado.")
            boton_pdf = QPushButton(widget)
            boton_pdf.setText("Ver PDF")
            boton_pdf.pressed.connect(VerPdf)
            widget.layout().addWidget(boton_pdf)
            boton_img = QPushButton(widget)
            boton_img.setText("Ver IMAGEN")
            boton_img.pressed.connect(VerImg)
            widget.layout().addWidget(boton_img)
            self.iface.messageBar().pushWidget(widget, Qgis.Info)
            self.dlg.msgGuardado.setHidden(False)
        else:
            self.iface.messageBar().pushMessage("INEGI", "Error al exportar el mapa a PDF", Qgis.Critical, 5)
  

    def cargarMunicipios(self,year):
        self.unirDatos(f"Municipios_{year}",['CVEGEO','CVE_ENT','CVE_MUN','NOMGEO','geometry'])
        self.año = year

    def activaBtnMapa(self,valor):
        if os.path.exists(valor):
            self.dlg.btnMapa.setEnabled(True)
            self.rutaGuardar = valor
        else:
            self.dlg.btnMapa.setDisabled(True)
           

    def run(self):
        def cargar():
            self.dlg.show()
            self.limpiar()
            self.dlg.msgGuardado.setHidden(True)
            self.Copia = "plantilla/copia_tmp"
            self.load_qgz_project()
            self.dlg.mQgsFileWidget.setFilter("Excel (*.xls *.xlsx)")
            self.dlg.mQgsFileWidget.fileChanged.connect(self.validar)
            self.dlg.comboRampas.currentTextChanged.connect(self.seleccRampa)
            self.dlg.btnMapa.clicked.connect(self.crearComposicion)
            self.dlg.btnLimpiar.clicked.connect(self.limpiar)
            self.dlg.selectMuni.currentTextChanged.connect(self.cargarMunicipios)
            self.dlg.carpetaGuardar.fileChanged.connect(self.activaBtnMapa)
            self.dlg.setWindowTitle("Generardor Mapas Tematicos")
        if self.first_start == True:
            self.first_start = False
            self.dlg = excel2mapaDialog()
            cargar()
        else:
            act = self.dlg
            if act.isVisible():
                act.activateWindow() 
                act.setFocus()
            else:
                cargar()
        result = self.dlg.exec_()
        if result==0:
            print("Formulario Cerrado")

            